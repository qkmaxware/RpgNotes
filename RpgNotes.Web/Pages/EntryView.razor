@page "/campaign/{id:int}/entries/{eid}"
@inject AppData Data;
@inject History Nav;
@using RpgNotes.Web.Shared.Popups;

@if (entry != null) {
    <Navigator Title=@entry.Name Previous=@($"campaign/{id}")>
        <span class="w3-dropdown-hover" style="float:inherit;">
            <button class="w3-button darker">&#x22EE;</button>
            <div class="w3-dropdown-content w3-bar-block w3-card-4" style="right:0;">
                <button class="w3-bar-item w3-button darker" @onclick=delete>Delete Entry</button>
            </div>
        </span>
    </Navigator>

    <div class="w3-row">
        <div class="w3-col l3 w3-right">

            <div class="w3-round-large w3-margin dark">
                <div class="darker w3-display-container w3-margin-bottom">
                    <div class="w3-large">
                        <div class="w3-bar" style="display:flex; flex-direction:row;">
                            @foreach (var tab in Enum.GetValues(typeof(Tabs))) {
                                <button style="flex-grow:1" class="w3-bar-item w3-button border-darker @(Tab == (Tabs)tab ? "dark" : string.Empty)" @onclick=@(() => Tab=(Tabs)tab)>
                                    @tab.ToString()
                                </button>
                            }
                            @if (entry.LocationData != null) {
                                <button style="width: 32px; overflow: hidden; padding: 0;" class="w3-bar-item w3-button border-darker" @onclick=openMap>
                                    <img src="images/map.svg" style="height: 24px; max-width: 32px; width: auto;">
                                </button>
                            } else if (entry.WorldData != null) {
                                <button style="width: 32px; overflow: hidden; padding: 0;" class="w3-bar-item w3-button border-darker" @onclick=openMap>
                                    <img src="images/map.svg" style="height: 24px; max-width: 32px; width: auto;">
                                </button>    
                            }
                            <button style="width: 32px; overflow: hidden; padding: 0;" class="w3-bar-item w3-button border-darker" @onclick=openMapToMyCoordinates>
                                <img src="images/markers/gps.svg" style="height: 24px; max-width: 32px; width: auto;">
                            </button>
                        </div>
                    </div>
                </div>
                <div>
                    @if (Tab == Tabs.Details) {
                    <div>
                        @if (entry.CharacterData != null) {
                            <div class="w3-round-large dark">
                                <div class="w3-padding">
                                    <div class="w3-margin-bottom">
                                        <label>Status</label>
                                        <div class="w3-bar darker">
                                            <button style="width:49.5%" class="w3-bar-item w3-button @(!entry.CharacterData.IsDead ? "highlight" : string.Empty)" @onclick=@(() => entry.CharacterData.IsDead=false)>
                                                Alive
                                            </button>
                                            <button style="width:49.5%" class="w3-bar-item w3-button @( entry.CharacterData.IsDead ? "highlight" : string.Empty)" @onclick=@(() => entry.CharacterData.IsDead=true)>
                                                Dead
                                            </button>
                                        </div
                                    </div>
                                    <div class="w3-margin-bottom">
                                        <label>Species</label>
                                        <input class="w3-input darker" type="text" @bind=entry.CharacterData.Species>
                                    </div>
                                    <div class="w3-margin-bottom">
                                        <label>Age</label>
                                        <input class="w3-input darker" type="number" @bind=entry.CharacterData.Age>
                                    </div>
                                    @if(entry.CharacterData.Attributes != null) {
                                        <AttributeDrawer Attributes=entry.CharacterData.Attributes></AttributeDrawer>
                                    }
                                </div>
                            </div>
                        }
                        @if (entry.QuestData != null) {
                            <div class="w3-round-large dark">
                                <div class="w3-padding">
                                    <div class="w3-margin-bottom">
                                        <div class="w3-bar darker">
                                            <button style="width:49.5%" class="w3-bar-item w3-button @(!entry.QuestData.IsComplete ? "highlight" : string.Empty)" @onclick=@(() => entry.QuestData.IsComplete=false)>
                                                Open
                                            </button>
                                            <button style="width:49.5%" class="w3-bar-item w3-button @( entry.QuestData.IsComplete ? "highlight" : string.Empty)" @onclick=@(() => entry.QuestData.IsComplete=true)>
                                                Complete
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @if (entry.LocationData != null) {

                        }
                        @if (entry.WorldData != null) {

                        }
                        @if (entry.FactionData != null) {

                        }
                        @if (entry.ItemData != null) {
                            
                        }

                        <div class="w3-round-large dark">
                            <div class="darker w3-display-container">
                                <div class="w3-padding w3-large">
                                    Notes
                                </div>
                                <div class="w3-display-topright">
                                    <button class="w3-button" style="padding:6px;" @onclick=@(() => editNotes?.Open())>
                                        <img src="images/edit.svg" style="width: auto; height: 30px;">
                                    </button>
                                </div>
                            </div>
                            <div class="w3-padding">
                                @entry.Notes
                            </div>
                        </div>
                        <TextEditorPopup @ref=editNotes Title="Edit Notes" Getter=@(() => entry.Notes) Setter=@((val) => { entry.Notes = val; StateHasChanged(); })></TextEditorPopup>

                        <div class="w3-round-large dark">
                            <div class="darker w3-display-container">
                                <div class="w3-padding w3-large">
                                    Tags
                                </div>
                                <div class="w3-display-topright">
                                    <button class="w3-button" style="padding:6px;" @onclick=@(() => editTags?.Open(tags))>
                                        <img src="images/edit.svg" style="width: auto; height: 30px;">
                                    </button>
                                </div>
                            </div>
                            <div class="w3-padding">
                                @foreach (var tag in tags) {
                                    <TagDrawer Tag=tag></TagDrawer>
                                }
                            </div>
                        </div>
                        <TagPicker @ref=editTags Options=Campaign.Tags OnSave=@((next) => { tags=next; entry.Tags=next.Select(x => x.Name).ToList(); StateHasChanged(); })></TagPicker>

                        <div class="w3-round-large dark">
                            <div class="darker w3-display-container">
                                <div class="w3-padding w3-large">
                                    Images
                                </div>
                                <div class="w3-display-topright">
                                    <button class="w3-button" style="padding:6px;" @onclick=@(() => addWebImage?.Open())>
                                        <img src="images/image.www.svg" style="width: auto; height: 30px;">
                                    </button>
                                    <button class="w3-button" style="padding:6px;" @onclick=@(() => addLocalImage?.Open())>
                                        <img src="images/image.file.svg" style="width: auto; height: 30px;">
                                    </button>
                                </div>
                            </div>
                            <div class="w3-padding">
                                @foreach (var image in entry.Images) {
                                    <img src=@image.Url style="max-width: 120px; height: auto;" @onclick=@(() => bigImage?.Open(image))>
                                }
                            </div>
                        </div>
                        <UrlImagePicker @ref=addWebImage OnSave=@((img)=>{ entry.Images.Add(img); StateHasChanged(); })></UrlImagePicker>
                        <LocalFileImagePicker @ref=addLocalImage OnSave=@((img)=>{ entry.Images.Add(img); StateHasChanged(); })></LocalFileImagePicker>
                        <ImageViewer @ref=bigImage CanMarkAsMap=@canHaveMap OnMarkAsMap=makeMap OnDelete=@((img) => { entry.Images.Remove(img); StateHasChanged(); })></ImageViewer>
                    </div>
                    } else if (Tab == Tabs.Connections) {
                    <div>
                        @{
                        var c = Campaign;
                        foreach (var connection in c.Entries.EnumerateConnections(entry)) {
                            var guid = connection.GetOtherParticipant(eid);
                            <div class="w3-padding">
                                <div class="dark w3-padding w3-round-xlarge" >
                                    @connection.RelationshipStringFor(eid) @c.Entries[guid]?.Name
                                    <div class="w3-row">
                                        <div class="w3-col s6">
                                            <span class="w3-button" @onclick=@(()=>gotoConnection(guid))>
                                                <img src="images/link.svg" width=20 height=20>
                                            </span> 
                                            @if (connection.IsLocationBased && entityHasMap(guid)) {
                                            <span class="w3-button" @onclick=@(()=>openMapToMyCoordinatesInConnection(connection))>
                                                <img src="images/markers/gps_white.svg" width=20 height=20>
                                            </span> 
                                            }
                                        </div>
                                        <div class="w3-col s6 w3-right-align">
                                            <span class="w3-button" @onclick=@(()=>c.Entries.Disconnect(connection))>&times;</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="w3-padding">
                            <button class="w3-green w3-button w3-block" @onclick=@(() => addConnection?.Open())>Add Connection</button>
                        </div>
                        <ConnectionMaker @ref=addConnection Current=@entry Entries=@c.Entries OnAdd=@((conn) => { c.Entries.Connect(conn); StateHasChanged(); })></ConnectionMaker>
                        }
                    </div>
                    }
                </div>
            </div>
        </div>
        <div class="w3-col l9">
            <div class="w3-round-large w3-margin dark">
                <div class="darker w3-display-container">
                    <div class="w3-padding w3-large">
                        Description
                    </div>
                    <div class="w3-display-topright">
                        <button class="w3-button" style="padding:6px;" @onclick=@(() => editDescription?.Open())>
                            <img src="images/edit.svg" style="width: auto; height: 30px;">
                        </button>
                    </div>
                </div>
                <div class="w3-padding">
                    <Markdown Content=@entry.Description></Markdown>
                </div>
            </div>
            <TextEditorPopup @ref=editDescription Title="Edit Description" Markdown=true Getter=@(() => entry.Description) Setter=@((val) => { entry.Description = val; StateHasChanged(); })></TextEditorPopup>
        </div>
    </div>
}
<Confirm @ref=confirmation></Confirm>
<Notification @ref=notification></Notification>

@code {
    [Parameter] public int id { get; set; }
    public Campaign Campaign => Data.Campaigns == null ? null : Data.Campaigns.ElementAtOrDefault(id);
    [Parameter] public string eid {get; set;}
    private Entry entry;
    private List<Tag> tags;

    protected override void OnInitialized() {
        var c = Campaign;
        if (c == null) {
            entry = null;
        } else {
            entry = c.Entries?.EntryOrDefault(eid);
        }

        if (entry != null) {
            if (entry.Tags == null)
                entry.Tags = new List<string>();
            if (entry.Images == null)
                entry.Images = new List<Image>();
            if (c.Tags == null)
                c.Tags = new List<Tag>();
            tags = c.Tags.Where(tag => entry.Tags?.Contains(tag.Name) ?? false).ToList();
        }
    }

    private enum Tabs {
        Details, Connections
    }
    private Tabs Tab = (Tabs)0;

    private TextEditorPopup editDescription;
    private TextEditorPopup editNotes;
    private TagPicker editTags;
    private UrlImagePicker addWebImage;
    private LocalFileImagePicker addLocalImage;
    private ImageViewer bigImage;
    private ConnectionMaker addConnection;

    private void gotoConnection(string guid) {
        if (!string.IsNullOrEmpty(guid)) {
            Nav.NavigateTo($"campaign/{id}/entries/{guid}", noHistory: true); 
            this.eid = guid;
            entry=Campaign.Entries[guid]; 
            Tab=(Tabs)0;
            StateHasChanged();
        }
    }

    private Confirm confirmation;
    private Notification notification;
    private void delete() {
        confirmation.RequestConfirmation(deleteNow);
    }
    private void deleteNow() {
        var c = Campaign;
        c.Entries.Remove(this.entry);
        Nav.NavigateTo($"campaign/{id}", noHistory: true);
    }

    private bool canHaveMap => entry.LocationData != null || entry.WorldData != null;
    private Image mapData(Entry entry) => entry.LocationData?.Map ?? entry.WorldData?.Map;
    private bool hasMapData(Entry entry) => mapData(entry) != null;
    private void openMap() {
        var image = entry.LocationData?.Map ?? entry.WorldData?.Map;
        if (image == null) {
            // No map, prompt
            notification.NotifyUser("NO MAP DATA! Select an image from the details panel and use the \"Mark As Map\" button to use that image as a map for this entry.");
        } else {
            // Has map, redirect
            Nav.NavigateTo($"campaign/{id}/entries/{eid}/map", noHistory: true);
        }
    }
    private void makeMap(Image image) {
        if (!canHaveMap)
            return;

        if (image == null || string.IsNullOrEmpty(image.Url))
            return;

        if (hasMapData(this.entry)) {
            confirmation.RequestConfirmation("There is already a map set for this entry. Would you like to overwrite this map?", () => setMapData(image));
        } else {
            setMapData(image);
        }
    }
    private void setMapData(Image image) {
        if (entry.LocationData != null) {
            entry.LocationData.Map = image;
        } 
        if (entry.WorldData != null) {
            entry.WorldData.Map = image;
        }
    }
    public bool entityHasMap(string guid) {
        var entity = Campaign.Entries[guid];
        return entity != null && hasMapData(entity);
    }
    private void openMapToMyCoordinates() {
        foreach (var connection in this.Campaign.Entries.EnumerateConnections(entry)) {
            bool areMyCoordinates = (connection.MapEntity == ConnectionMember.To && connection.From == this.eid)
                                  ||(connection.MapEntity == ConnectionMember.From && connection.To == this.eid);

            if (connection.IsLocationBased && connection.Position != null && areMyCoordinates) {
                // Is a location attribute, 
                // Has a set position
                // The coordinates point to me
                openMapToMyCoordinatesInConnection(connection);
                return;
            }
        }
        notification.NotifyUser("No position has been saved for this entry. Create a located based connection and set its position on that location's map.");
    }
    private void openMapToMyCoordinatesInConnection(Connection connection) {
        if (connection.Position == null) {
            confirmation.RequestConfirmation("A position has not yet been saved. Place one?", () => {
                connection.Position = new PositionMarker {
                    Marker = "images/markers/gps.svg",
                    X = 0,
                    Y = 0,
                };
                EntryMapView.AutoOpenEditor = connection;
                openMapToMyCoordinatesImmediately(connection);
            });
        } else {
            openMapToMyCoordinatesImmediately(connection);
        }
    }
    private void openMapToMyCoordinatesImmediately(Connection connection) {
        if (connection.MapEntity == ConnectionMember.From) {
            Nav.NavigateTo($"campaign/{id}/entries/{connection.From}/map", noHistory: true);
        } else if (connection.MapEntity == ConnectionMember.To) {
            // Default route
            Nav.NavigateTo($"campaign/{id}/entries/{connection.To}/map", noHistory: true);
        }
    }
}