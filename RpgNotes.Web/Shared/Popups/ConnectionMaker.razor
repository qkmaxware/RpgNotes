<Modal @ref=modal Title="Define Connection">
    @if (modal.Show) {
        <div class="w3-padding">
            <label>Relationship</label>
            <select class="w3-input darker" @bind=generator>
                @foreach(var group in organizedGenerators) {
                    <optgroup label="@group.Key">
                        @foreach (var kv in group.Value) {
                            <option value="@(group.Key).@(kv.Key)">@kv.Key</option>
                        }
                    </optgroup>
                }
            </select>
            @if (generator == (OtherConnectionsGroup + "." + CustomConnection)) {
                <div class="w3-panel w3-leftbar">
                    <label>Connection to</label>
                    <input class="w3-input darker" type="text" placeholder="@(Current.Name)'s relationship to @(customRelationOtherName)" @bind=forward>
                    <label>Connection from</label>
                    <input class="w3-input darker" type="text" placeholder="@(customRelationOtherName)'s relationship to @(Current.Name)" @bind=reverse>
                </div>
            }
        </div>
        <div class="w3-padding">
            <label>With</label>
            <input list="all-entries-list" class="w3-input darker" type="text" @bind=entryName>
            <datalist id="all-entries-list">
                @if (Entries != null) {
                foreach (var entry in Entries.Enumerate()) {
                    <option value=@entry.Name/>
                }
                }
            </datalist>
        </div>
    }
    <div class="w3-padding w3-center">
        <button class="w3-green w3-button" @onclick=addFromOrganized>Add</button>
    </div>
</Modal>

@code {
    private string generator;
    private string entryName;

    public static string OtherConnectionsGroup = "Other";
    private static string CustomConnection = "Custom";
    private string customRelationOtherName => string.IsNullOrEmpty(entryName) ? "?" : entryName;

    private Modal modal;
    private Dictionary<string, Dictionary<string, Func<string,string,Connection>>> organizedGenerators = new Dictionary<string, Dictionary<string, Func<string, string, Connection>>> {
        {"Personal", new Dictionary<string, Func<string, string, Connection>>{
            { "Parent of", Connection.ParentOf },
            { "Child of", (child, parent) => Connection.ParentOf(parent, child) },
            { "In a relationship with", Connection.InARelationshipWith },
            { "Friends with", Connection.FriendsWith },
            { "Rivals with", Connection.RivalOf },
            { "Dislikes", Dislikes },
            { "Studied with", StudiedWith },
            { "Taught", Taught },
            { "Learned from", (student, teacher) => Taught(teacher, student) },
        }},
        {"Possession", new Dictionary<string, Func<string, string, Connection>>{
            { "Owner of", Connection.OwnerOf },
            { "Owned by", (item, owner) => Connection.OwnerOf(owner, item) },
            { "Leader of", Connection.LeaderOf },
            { "Lead by", (faction, owner) => Connection.LeaderOf(owner, faction) },
            { "Contains", Connection.Contains },
            { "Contained in", (item, bag) => Connection.Contains(bag, item) } 
        }},
        {"Location", new Dictionary<string, Func<string, string, Connection>>{
            { "Located in", Connection.LocatedIn },
            { "Contains", (country, city) => Connection.LocatedIn(city, country) },
        }},
        {OtherConnectionsGroup, new Dictionary<string, Func<string, string, Connection>>{}}
    };

    [Parameter] public Entry Current {get; set;}
    [Parameter] public EntryCollection Entries {get; set;}
    [Parameter] public Action<Connection> OnAdd {get; set;}

    public void Open() {
        forward = null;
        reverse = null;
        if (!organizedGenerators["Other"].ContainsKey(CustomConnection)) {
            organizedGenerators["Other"].Add( CustomConnection, (from, to) => CustomConnectionBuilder(from, to) );
        }
        modal?.Open();
    }

    private void addFromOrganized() {
        var kv = generator.Split('.', 2);
        if (kv.Length < 2)
            return;

        var groupName = kv[0];
        var funcName = kv[1]; 
        if (organizedGenerators.ContainsKey(groupName)) {
            var group = organizedGenerators[groupName];
            if (group.ContainsKey(funcName)) {
                var generatorFunction = group[funcName];
                if (generatorFunction != null) {
                    var ent = Entries.Enumerate().Where(e => e.Name == entryName).FirstOrDefault();
                    if (ent != null) {
                        var conn = generatorFunction(Entries.GuidOf(Current), Entries.GuidOf(ent));
                        OnAdd?.Invoke(conn);
                        modal?.Close();
                    }
                }
            }
        }
    }

    #region Other Connections
    private static Connection Dislikes (string fromGuid, string toGuid) {
        return new Connection {
            From = fromGuid, To = toGuid,
            ForwardRelation = "Dislikes",
            ReverseRelation = "Disliked by",
        };
    }
    private static Connection StudiedWith (string fromGuid, string toGuid) {
        return new Connection {
            From = fromGuid, To = toGuid,
            ForwardRelation = "Studied with",
            ReverseRelation = "Studied with",
        };
    }
    private static Connection Taught (string fromGuid, string toGuid) {
        return new Connection {
            From = fromGuid, To = toGuid,
            ForwardRelation = "Taught",
            ReverseRelation = "Learned from",
        };
    }

    private string forward;
    private string reverse;
    private Connection CustomConnectionBuilder (string fromGuid, string toGuid) {
        return new Connection {
            From = fromGuid, To = toGuid,
            ForwardRelation = forward,
            ReverseRelation = reverse,
        }; 
    }
    #endregion
}